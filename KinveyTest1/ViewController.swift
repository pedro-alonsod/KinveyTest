//
//  ViewController.swift
//  KinveyTest1
//
//  Created by Nora Hilda De los Reyes on 01/03/16.
//  Copyright Â© 2016 pedro alonso. All rights reserved.
//

import UIKit

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        
        
        //crear un user random cuando necesitas guardar cosas anonimamente
        if KCSUser.activeUser() == nil {
            KCSUser.createAutogeneratedUser(
                [
                    KCSUserAttributeEmail : "kinvey@kinvey.com",
                    KCSUserAttributeGivenname : "Arnold",
                    KCSUserAttributeSurname : "Kinvey"
                ],
                completion: { (user: KCSUser!, errorOrNil: NSError!, result: KCSUserActionResult) -> Void in
                    
                    
                    print("not created")
                }
            )
        } else {
            //otherwise user is set and do something
            print("set now lets do something")
        }
        
        
        
        //checar si hay un user ya creado
        let user = KCSUser.activeUser()
        if let active = user {
            print(active)
        } else {
            print("nil")
        }
        
        
        // dunno pero se ocupa antes de guardar info haaa now i know is to get the collection in which to save it
        let store = KCSAppdataStore.storeWithOptions([
            KCSStoreKeyCollectionName : "Events",
            KCSStoreKeyCollectionTemplateClass : Event.self
            ])
        
        
        
        //para guardar las cosas en esa collection
        let event = Event()
        event.name = "Launch Party"
        event.location = "Kinvey HQ"
        event.date = NSDate(timeIntervalSince1970: 1352149171) //sample date
        store.saveObject(
            event,
            withCompletionBlock: { (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
                if errorOrNil != nil {
                    //save failed
                    NSLog("Save failed, with error: %@", errorOrNil.localizedFailureReason!)
                } else {
                    //save was successful
                    NSLog("Successfully saved event (id='%@').", (objectsOrNil[0] as! NSObject).kinveyObjectId())
                }
            },
            withProgressBlock: nil
        )
        
        
        // we need this to get the db used or collection same thing
        let storeExtra = KCSAppdataStore.storeWithOptions([
            KCSStoreKeyCollectionName : "Data",
            KCSStoreKeyCollectionTemplateClass : ExtraData.self
            ])
        
        let extra = ExtraData()
        extra.name = "test"
        extra.date = NSDate(timeIntervalSince1970: 135214900)
        extra.stuff = "10.9990"
        extra.location = "get geopoint here"
        extra.geocoord = CLLocation(latitude: 70.0001, longitude: 40.8764)
        
        storeExtra.saveObject(extra, withCompletionBlock:  {
            
            (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
            
            if errorOrNil != nil {
                
                //save failed see why
                print(errorOrNil.localizedFailureReason! + "llllllllll")
            } else {
                //saved worked
                print((objectsOrNil[0] as! NSObject).kinveyObjectId() + "zzzzzzzz")
                print(String(objectsOrNil.count) + " num ")
                print(objectsOrNil[0] as! NSObject)
            }
            
            }, withProgressBlock: nil)
        
        
        
        /* supposed to load objects
        storeExtra.loadObjectWithID(extra.entityId!, withCompletionBlock: {
            (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
            
            if errorOrNil == nil {
                print("successfully retrieved \(objectsOrNil[0] as! NSObject)")
            } else {
                print("error \(errorOrNil.localizedFailureReason)")
            }
            
            }, withProgressBlock: nil)
        
        
        */
        
        let query = KCSQuery()
        let queryWithInfo = KCSQuery(onField: "name", withExactMatchForValue: "test")
        
        
        storeExtra.queryWithQuery(queryWithInfo, withCompletionBlock: {
            
            (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
            if errorOrNil != nil {
                
                print("error happenend \(errorOrNil.localizedFailureReason!)")
            
            } else {
                
                print("we have \(objectsOrNil.count)")
            
            }
            
            }, withProgressBlock: nil)
        
        
        
        /*
        
        // This code assumes that you have a class with a name property,
        // an address property and a geocoord property.  To properly enable
        // geo queries, makes sure to map the "description" property to
        // KCSEntityKeyGeolocation in the mapping function
        event1.name = "Holiday Party At The Office"
        event1.address = "1 Main St, Cambridge, MA"
        event1.geocoord = CLLocation(latitude: -71.083934, longitude: 42.362474)
        event2.name = "Pat's Birthday"
        event2.address = "1 Broadway, Cambridge, MA"
        event2.geocoord = CLLocation(latitude: -71.085438, longitude: 42.362688)
        event3.name = "Happy Hour"
        event3.address = "711 Atlantic Ave, Boston, MA"
        event3.geocoord = CLLocation(latitude: -71.056416, longitude: 42.351018)
        // Find all entities within a sphere centered at [-71, 41]
        let q1 = KCSQuery(
        onField: KCSEntityKeyGeolocation,
        usingConditional: KCSQueryConditional.KCSNearSphere,
        forValue: [-71, 41]
        )
        // Find all entites within .5 miles of the sphere centered at [-71.05, 42.35]
        let q2 = KCSQuery(
        onField: KCSEntityKeyGeolocation,
        usingConditionalsForValuesArgs: getVaList([
        KCSQueryConditional.KCSNearSphere.rawValue, [-71.05, 42.35],
        KCSQueryConditional.KCSMaxDistance.rawValue, 0.5
        ])
        )
        let point1 = [-70, 44]
        let point2 = [-72, 42]
        let box = [point1, point2]
        // Find all entities "Within" the box that goes from point1 to point2
        let q3 = KCSQuery(
        onField: KCSEntityKeyGeolocation,
        usingConditional: KCSQueryConditional.KCSWithinBox,
        forValue: box
        )
        // Get our events collection, assuming your class is called 'Events'
        let events = KCSCollection(
        fromString: "Events",
        ofClass: Event.self
        )
        // Fetch the first group of entities
        events.query = q1;
        events.fetchWithDelegate(self)
        // Fetch the second group of entities
        events.query = q2;
        events.fetchWithDelegate(self)
        // Fetch the third group of entities
        events.query = q3;
        events.fetchWithDelegate(self)
        // Reset the query by setting it to an empty query.
        events.query = KCSQuery();
        */

    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    


}

//la collection used in kinvey

class Event : NSObject {
    
    var entityId: String? //Kinvey entity _id
    var name: String?
    var date: NSDate?
    var location: String?
    var metadata: KCSMetadata? //Kinvey metadata, optional
    
    override func hostToKinveyPropertyMapping() -> [NSObject : AnyObject]!     {
        return [
            "entityId" : KCSEntityKeyId, //the required _id field
            "name" : "name",
            "date" : "date",
            "location" : "location",
            "metadata" : KCSEntityKeyMetadata //optional _metadata field
        ]
    }
    
}

class ExtraData: NSObject {
    
    var entityId: String? //needed
    var name: String?
    var stuff: String?
    var date: NSDate?
    var location: String?
    var metaData: KCSMetadata?
    var geocoord: CLLocation?
    
    
    override func hostToKinveyPropertyMapping() -> [NSObject : AnyObject]! {
        
        return ["entityId": KCSEntityKeyId, //required
                "name": "name",  //
                "stuff": "stuff", //random from the model in which we are basing the table or collection
                "date": "date",   //
                "location": "location",//
                "metaData": KCSEntityKeyMetadata, //optional
                "geocoord": KCSEntityKeyGeolocation //geo
        ]
    }
}
